" Script to handle installing plugins
so ~/dotfiles/vim/plug.vim

" Remove exisiting autocmds
autocmd!

" To install plugins, run command 'PlugInstall'
call plug#begin('~/.vim/plugged')
" Fuzzy file finder
Plug 'kien/ctrlp.vim'
" Cross-language comment-toggle command
Plug 'tpope/vim-commentary'
" Auto-detect indentation
Plug 'tpope/vim-sleuth'
" Color scheme
Plug 'lifepillar/vim-solarized8'

" Install any local plugins
if !empty(glob('~/.vimrc_plugins'))
    so ~/.vimrc_plugins
endif

call plug#end()

"""""""""""""""""""""""""
"
" BASIC CONFIGURATION
"""""""""""""""""""""""""

set nocompatible

" Allow unsaved background buffers and remember marks/undo for them
set hidden

" Remember more commands
set history=10000

" Tab indentation
" set tabstop=4
" set softtabstop=4

" Space indentation
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set autoindent

set laststatus=2

set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

set cursorline
set cmdheight=1

" Always show tab bar at the top
set showtabline=2

" Leave lines when scrolling off end of screen
set scrolloff=3

set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Allow backspacing over everything
set backspace=indent,eol,start

" Show incomplete commands
set showcmd

syntax on
filetype plugin indent on

set wildmode=longest,list
set wildmenu

" No prompt to read changed files
set autoread

" Split diffs vertically instead of horizontally
set diffopt=vertical

" Hide preview menu
set completeopt=menuone

" Show relative line numbers
set number
set relativenumber

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

"""""""""""""""""""""""""
"
" COLORS
"""""""""""""""""""""""""
set background=dark
let g:solarized_termtrans=1
colorscheme solarized8

hi CursorLine guifg=NONE guibg=#121212 gui=NONE ctermfg=NONE ctermbg=236 cterm=NONE
hi Visual     guifg=NONE guibg=#212121 gui=NONE ctermfg=NONE ctermbg=238 cterm=NONE

"""""""""""""""""""""""""
"
" CUSTOM AUTOCMDS
"""""""""""""""""""""""""

" Jump to last cursor position when reopening a file
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

autocmd FileType python setlocal sw=4 sts=4 et

"""""""""""""""""""""""""
"
" KEY MAPS
"""""""""""""""""""""""""

let mapleader=' '

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Toggle previously opened file
nnoremap <leader><leader> <c-^>

" Cycle between and close buffers
nnoremap <leader>n :bnext<cr>
nnoremap <leader>p :bprevious<cr>
nnoremap <leader>d :bdelete<cr>
nnoremap <leader>b :buffers<cr>:b

" Select entire line in non-block visual mode
nnoremap vv 0v$

" Close all other splits
nnoremap <leader>o :only<cr>

" Open files in current buffer's directory
nnoremap <leader>e :CtrlP <c-r>=expand('%:h')<cr><cr>
nnoremap <leader>v :view <c-r>=expand('%:h')<cr>/

nnoremap <leader>- :Explore<cr>

" Make tab indent at beginning of line, else do completion
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col
        return "\<tab>"
    endif

    let char = getline('.')[col - 1]
    if char =~ '\k'
        " There's an identifier before the cursor, so complete the identifier.
        return "\<c-p>"
    else
        return "\<tab>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

" Silver Searcher
if executable('ag')
    " use ag for grep
    set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep

    " search for term and open quick-fix window with results
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

    " search for term in project
    nnoremap <leader>/ :Ag<space>
    " search for current word in project
    nnoremap <leader>* :Ag -w <cword><cr>
endif

"""""""""""""""""""""""""
"
" EXTENSION SETTINGS
"""""""""""""""""""""""""

" Commentary

" Use // ... for commenting out lines instead of /* ... */
autocmd FileType c,cpp setlocal commentstring=//\ %s

" CtrlP

" only look for files that are not ignored by git
if isdirectory('.git')
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
endif

" Netrw

let g:netrw_banner=0 " disable banner by default in filebrowser
